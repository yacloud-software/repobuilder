// Code generated by protoc-gen-go.
// source: protos/golang.conradwood.net/apis/repobuilder/repobuilder.proto
// DO NOT EDIT!

/*
Package repobuilder is a generated protocol buffer package.

It is generated from these files:
	protos/golang.conradwood.net/apis/repobuilder/repobuilder.proto

It has these top-level messages:
	TrackerGitRepository
	TrackerLog
	CreateWebRepoRequest
	RepoCreateStatus
	CreateRepoResponse
	RepoStatusRequest
	RepoDomain
	Language
	Choices
	ForkRequest
	LatePatchingQueue
*/
package repobuilder

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import auth "golang.conradwood.net/apis/auth"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// we create a repository in the gitserver, here we track progress whilst it goes through various stages in the create process
type TrackerGitRepository struct {
	ID                uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	CreateRequestID   uint64 `protobuf:"varint,2,opt,name=CreateRequestID" json:"CreateRequestID,omitempty"`
	CreateType        uint32 `protobuf:"varint,3,opt,name=CreateType" json:"CreateType,omitempty"`
	RepositoryID      uint64 `protobuf:"varint,4,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
	URLHost           string `protobuf:"bytes,5,opt,name=URLHost" json:"URLHost,omitempty"`
	URLPath           string `protobuf:"bytes,6,opt,name=URLPath" json:"URLPath,omitempty"`
	RepositoryCreated bool   `protobuf:"varint,7,opt,name=RepositoryCreated" json:"RepositoryCreated,omitempty"`
	SourceInstalled   bool   `protobuf:"varint,8,opt,name=SourceInstalled" json:"SourceInstalled,omitempty"`
	PackageID         string `protobuf:"bytes,9,opt,name=PackageID" json:"PackageID,omitempty"`
	PackageName       string `protobuf:"bytes,10,opt,name=PackageName" json:"PackageName,omitempty"`
	ProtoFilename     string `protobuf:"bytes,11,opt,name=ProtoFilename" json:"ProtoFilename,omitempty"`
	ProtoSubmitted    bool   `protobuf:"varint,12,opt,name=ProtoSubmitted" json:"ProtoSubmitted,omitempty"`
	ProtoCommitted    bool   `protobuf:"varint,13,opt,name=ProtoCommitted" json:"ProtoCommitted,omitempty"`
	MinProtoVersion   uint64 `protobuf:"varint,14,opt,name=MinProtoVersion" json:"MinProtoVersion,omitempty"`
	//  string Context = 15;
	UserID             string `protobuf:"bytes,16,opt,name=UserID" json:"UserID,omitempty"`
	PermissionsCreated bool   `protobuf:"varint,17,opt,name=PermissionsCreated" json:"PermissionsCreated,omitempty"`
	SecureArgsCreated  bool   `protobuf:"varint,18,opt,name=SecureArgsCreated" json:"SecureArgsCreated,omitempty"`
	ServiceID          string `protobuf:"bytes,19,opt,name=ServiceID" json:"ServiceID,omitempty"`
	ServiceUserID      string `protobuf:"bytes,20,opt,name=ServiceUserID" json:"ServiceUserID,omitempty"`
	ServiceToken       string `protobuf:"bytes,21,opt,name=ServiceToken" json:"ServiceToken,omitempty"`
	Finalised          bool   `protobuf:"varint,22,opt,name=Finalised" json:"Finalised,omitempty"`
	PatchRepo          bool   `protobuf:"varint,23,opt,name=PatchRepo" json:"PatchRepo,omitempty"`
	SourceRepositoryID uint64 `protobuf:"varint,24,opt,name=SourceRepositoryID" json:"SourceRepositoryID,omitempty"`
	NotificationSent   bool   `protobuf:"varint,25,opt,name=NotificationSent" json:"NotificationSent,omitempty"`
}

func (m *TrackerGitRepository) Reset()                    { *m = TrackerGitRepository{} }
func (m *TrackerGitRepository) String() string            { return proto.CompactTextString(m) }
func (*TrackerGitRepository) ProtoMessage()               {}
func (*TrackerGitRepository) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TrackerGitRepository) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *TrackerGitRepository) GetCreateRequestID() uint64 {
	if m != nil {
		return m.CreateRequestID
	}
	return 0
}

func (m *TrackerGitRepository) GetCreateType() uint32 {
	if m != nil {
		return m.CreateType
	}
	return 0
}

func (m *TrackerGitRepository) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

func (m *TrackerGitRepository) GetURLHost() string {
	if m != nil {
		return m.URLHost
	}
	return ""
}

func (m *TrackerGitRepository) GetURLPath() string {
	if m != nil {
		return m.URLPath
	}
	return ""
}

func (m *TrackerGitRepository) GetRepositoryCreated() bool {
	if m != nil {
		return m.RepositoryCreated
	}
	return false
}

func (m *TrackerGitRepository) GetSourceInstalled() bool {
	if m != nil {
		return m.SourceInstalled
	}
	return false
}

func (m *TrackerGitRepository) GetPackageID() string {
	if m != nil {
		return m.PackageID
	}
	return ""
}

func (m *TrackerGitRepository) GetPackageName() string {
	if m != nil {
		return m.PackageName
	}
	return ""
}

func (m *TrackerGitRepository) GetProtoFilename() string {
	if m != nil {
		return m.ProtoFilename
	}
	return ""
}

func (m *TrackerGitRepository) GetProtoSubmitted() bool {
	if m != nil {
		return m.ProtoSubmitted
	}
	return false
}

func (m *TrackerGitRepository) GetProtoCommitted() bool {
	if m != nil {
		return m.ProtoCommitted
	}
	return false
}

func (m *TrackerGitRepository) GetMinProtoVersion() uint64 {
	if m != nil {
		return m.MinProtoVersion
	}
	return 0
}

func (m *TrackerGitRepository) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *TrackerGitRepository) GetPermissionsCreated() bool {
	if m != nil {
		return m.PermissionsCreated
	}
	return false
}

func (m *TrackerGitRepository) GetSecureArgsCreated() bool {
	if m != nil {
		return m.SecureArgsCreated
	}
	return false
}

func (m *TrackerGitRepository) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

func (m *TrackerGitRepository) GetServiceUserID() string {
	if m != nil {
		return m.ServiceUserID
	}
	return ""
}

func (m *TrackerGitRepository) GetServiceToken() string {
	if m != nil {
		return m.ServiceToken
	}
	return ""
}

func (m *TrackerGitRepository) GetFinalised() bool {
	if m != nil {
		return m.Finalised
	}
	return false
}

func (m *TrackerGitRepository) GetPatchRepo() bool {
	if m != nil {
		return m.PatchRepo
	}
	return false
}

func (m *TrackerGitRepository) GetSourceRepositoryID() uint64 {
	if m != nil {
		return m.SourceRepositoryID
	}
	return 0
}

func (m *TrackerGitRepository) GetNotificationSent() bool {
	if m != nil {
		return m.NotificationSent
	}
	return false
}

// log for a reporequest
type TrackerLog struct {
	ID              uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	CreateRequestID uint64 `protobuf:"varint,2,opt,name=CreateRequestID" json:"CreateRequestID,omitempty"`
	CreateType      uint32 `protobuf:"varint,3,opt,name=CreateType" json:"CreateType,omitempty"`
	LogMessage      string `protobuf:"bytes,4,opt,name=LogMessage" json:"LogMessage,omitempty"`
	PublicMessage   string `protobuf:"bytes,5,opt,name=PublicMessage" json:"PublicMessage,omitempty"`
	Occured         uint32 `protobuf:"varint,6,opt,name=Occured" json:"Occured,omitempty"`
	Success         bool   `protobuf:"varint,7,opt,name=Success" json:"Success,omitempty"`
	Task            string `protobuf:"bytes,8,opt,name=Task" json:"Task,omitempty"`
}

func (m *TrackerLog) Reset()                    { *m = TrackerLog{} }
func (m *TrackerLog) String() string            { return proto.CompactTextString(m) }
func (*TrackerLog) ProtoMessage()               {}
func (*TrackerLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TrackerLog) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *TrackerLog) GetCreateRequestID() uint64 {
	if m != nil {
		return m.CreateRequestID
	}
	return 0
}

func (m *TrackerLog) GetCreateType() uint32 {
	if m != nil {
		return m.CreateType
	}
	return 0
}

func (m *TrackerLog) GetLogMessage() string {
	if m != nil {
		return m.LogMessage
	}
	return ""
}

func (m *TrackerLog) GetPublicMessage() string {
	if m != nil {
		return m.PublicMessage
	}
	return ""
}

func (m *TrackerLog) GetOccured() uint32 {
	if m != nil {
		return m.Occured
	}
	return 0
}

func (m *TrackerLog) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *TrackerLog) GetTask() string {
	if m != nil {
		return m.Task
	}
	return ""
}

type CreateWebRepoRequest struct {
	ID uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	// A free text description upto 2000 characters
	Description string `protobuf:"bytes,2,opt,name=Description" json:"Description,omitempty"`
	// a short name
	Name string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	// which language shall we prepare this for?
	Language common.ProgrammingLanguage `protobuf:"varint,4,opt,name=Language,enum=common.ProgrammingLanguage" json:"Language,omitempty"`
	//
	// which domain shall the repo be served under? (this will be 'git.domain.com')
	// the A-Record for 'git.domain.com' must exist already.
	// Example: Reponame == "stuffrepo", Domain == "foo.com"
	// git clone https://git.foo.com/git/stuffrepo
	Domain string `protobuf:"bytes,5,opt,name=Domain" json:"Domain,omitempty"`
	//
	// the repository name. A "repository name" is somewhat virtual. It is possible to serve the same repository
	// under multiple domains and path if required. this is the 'initial' host & path.
	RepoName string `protobuf:"bytes,6,opt,name=RepoName" json:"RepoName,omitempty"`
	//
	// The Servicename is used to register and find the service. ServiceName and Domain are used to route to a specific service
	ServiceName string `protobuf:"bytes,7,opt,name=ServiceName" json:"ServiceName,omitempty"`
	//
	// list of groups who may /view/ this service. a group which has no viewing rights will neither see its registration, nor have any sort of access to it.
	VisibilityGroupIDs []string `protobuf:"bytes,8,rep,name=VisibilityGroupIDs" json:"VisibilityGroupIDs,omitempty"`
	//
	// list of groupids who may /use/ this service. These users may not have access to the source or binary, but are granted access to view the service and use its
	// api
	AccessGroupIDs []string `protobuf:"bytes,9,rep,name=AccessGroupIDs" json:"AccessGroupIDs,omitempty"`
	//
	// list of groupids who may /develop/ this service
	DeveloperGroupIDs []string `protobuf:"bytes,10,rep,name=DeveloperGroupIDs" json:"DeveloperGroupIDs,omitempty"`
	// domain under which proto will be created, e.g. golang.singingcat.net
	ProtoDomain string `protobuf:"bytes,11,opt,name=ProtoDomain" json:"ProtoDomain,omitempty"`
}

func (m *CreateWebRepoRequest) Reset()                    { *m = CreateWebRepoRequest{} }
func (m *CreateWebRepoRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateWebRepoRequest) ProtoMessage()               {}
func (*CreateWebRepoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateWebRepoRequest) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CreateWebRepoRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateWebRepoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateWebRepoRequest) GetLanguage() common.ProgrammingLanguage {
	if m != nil {
		return m.Language
	}
	return common.ProgrammingLanguage_INVALID
}

func (m *CreateWebRepoRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *CreateWebRepoRequest) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *CreateWebRepoRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *CreateWebRepoRequest) GetVisibilityGroupIDs() []string {
	if m != nil {
		return m.VisibilityGroupIDs
	}
	return nil
}

func (m *CreateWebRepoRequest) GetAccessGroupIDs() []string {
	if m != nil {
		return m.AccessGroupIDs
	}
	return nil
}

func (m *CreateWebRepoRequest) GetDeveloperGroupIDs() []string {
	if m != nil {
		return m.DeveloperGroupIDs
	}
	return nil
}

func (m *CreateWebRepoRequest) GetProtoDomain() string {
	if m != nil {
		return m.ProtoDomain
	}
	return ""
}

// if this exists than the repo create request is "complete" (successful or not)
type RepoCreateStatus struct {
	ID              uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	CreateRequestID uint64 `protobuf:"varint,2,opt,name=CreateRequestID" json:"CreateRequestID,omitempty"`
	CreateType      uint32 `protobuf:"varint,3,opt,name=CreateType" json:"CreateType,omitempty"`
	Success         bool   `protobuf:"varint,4,opt,name=Success" json:"Success,omitempty"`
	Error           string `protobuf:"bytes,5,opt,name=Error" json:"Error,omitempty"`
}

func (m *RepoCreateStatus) Reset()                    { *m = RepoCreateStatus{} }
func (m *RepoCreateStatus) String() string            { return proto.CompactTextString(m) }
func (*RepoCreateStatus) ProtoMessage()               {}
func (*RepoCreateStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RepoCreateStatus) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *RepoCreateStatus) GetCreateRequestID() uint64 {
	if m != nil {
		return m.CreateRequestID
	}
	return 0
}

func (m *RepoCreateStatus) GetCreateType() uint32 {
	if m != nil {
		return m.CreateType
	}
	return 0
}

func (m *RepoCreateStatus) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RepoCreateStatus) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type CreateRepoResponse struct {
	RequestID uint64 `protobuf:"varint,1,opt,name=RequestID" json:"RequestID,omitempty"`
	Finished  bool   `protobuf:"varint,2,opt,name=Finished" json:"Finished,omitempty"`
	Success   bool   `protobuf:"varint,3,opt,name=Success" json:"Success,omitempty"`
	Error     string `protobuf:"bytes,4,opt,name=Error" json:"Error,omitempty"`
	URL       string `protobuf:"bytes,5,opt,name=URL" json:"URL,omitempty"`
}

func (m *CreateRepoResponse) Reset()                    { *m = CreateRepoResponse{} }
func (m *CreateRepoResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateRepoResponse) ProtoMessage()               {}
func (*CreateRepoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateRepoResponse) GetRequestID() uint64 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

func (m *CreateRepoResponse) GetFinished() bool {
	if m != nil {
		return m.Finished
	}
	return false
}

func (m *CreateRepoResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *CreateRepoResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *CreateRepoResponse) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

type RepoStatusRequest struct {
	RequestID uint64 `protobuf:"varint,1,opt,name=RequestID" json:"RequestID,omitempty"`
}

func (m *RepoStatusRequest) Reset()                    { *m = RepoStatusRequest{} }
func (m *RepoStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*RepoStatusRequest) ProtoMessage()               {}
func (*RepoStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RepoStatusRequest) GetRequestID() uint64 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

type RepoDomain struct {
	Domain string `protobuf:"bytes,1,opt,name=Domain" json:"Domain,omitempty"`
}

func (m *RepoDomain) Reset()                    { *m = RepoDomain{} }
func (m *RepoDomain) String() string            { return proto.CompactTextString(m) }
func (*RepoDomain) ProtoMessage()               {}
func (*RepoDomain) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RepoDomain) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

type Language struct {
	ID   uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *Language) Reset()                    { *m = Language{} }
func (m *Language) String() string            { return proto.CompactTextString(m) }
func (*Language) ProtoMessage()               {}
func (*Language) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Language) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Language) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Choices struct {
	Domains   []*RepoDomain `protobuf:"bytes,1,rep,name=Domains" json:"Domains,omitempty"`
	Languages []*Language   `protobuf:"bytes,2,rep,name=Languages" json:"Languages,omitempty"`
	Groups    []*auth.Group `protobuf:"bytes,3,rep,name=Groups" json:"Groups,omitempty"`
}

func (m *Choices) Reset()                    { *m = Choices{} }
func (m *Choices) String() string            { return proto.CompactTextString(m) }
func (*Choices) ProtoMessage()               {}
func (*Choices) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Choices) GetDomains() []*RepoDomain {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *Choices) GetLanguages() []*Language {
	if m != nil {
		return m.Languages
	}
	return nil
}

func (m *Choices) GetGroups() []*auth.Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type ForkRequest struct {
	RepositoryID uint64 `protobuf:"varint,1,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Domain       string `protobuf:"bytes,3,opt,name=Domain" json:"Domain,omitempty"`
	RepoName     string `protobuf:"bytes,4,opt,name=RepoName" json:"RepoName,omitempty"`
	//
	// list of groups who may /view/ this service. a group which has no viewing rights will neither see its registration, nor have any sort of access to it.
	VisibilityGroupIDs []string `protobuf:"bytes,5,rep,name=VisibilityGroupIDs" json:"VisibilityGroupIDs,omitempty"`
	//
	// list of groupids who may /use/ this service. These users may not have access to the source or binary, but are granted access to view the service and use its
	// api
	AccessGroupIDs []string `protobuf:"bytes,6,rep,name=AccessGroupIDs" json:"AccessGroupIDs,omitempty"`
	//
	// list of groupids who may /develop/ this service
	DeveloperGroupIDs []string `protobuf:"bytes,7,rep,name=DeveloperGroupIDs" json:"DeveloperGroupIDs,omitempty"`
}

func (m *ForkRequest) Reset()                    { *m = ForkRequest{} }
func (m *ForkRequest) String() string            { return proto.CompactTextString(m) }
func (*ForkRequest) ProtoMessage()               {}
func (*ForkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ForkRequest) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

func (m *ForkRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ForkRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ForkRequest) GetRepoName() string {
	if m != nil {
		return m.RepoName
	}
	return ""
}

func (m *ForkRequest) GetVisibilityGroupIDs() []string {
	if m != nil {
		return m.VisibilityGroupIDs
	}
	return nil
}

func (m *ForkRequest) GetAccessGroupIDs() []string {
	if m != nil {
		return m.AccessGroupIDs
	}
	return nil
}

func (m *ForkRequest) GetDeveloperGroupIDs() []string {
	if m != nil {
		return m.DeveloperGroupIDs
	}
	return nil
}

// some repos are created and patched AFTER they've been created. typically they are created read-only, then patched, and then marked as read/write
type LatePatchingQueue struct {
	ID           uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	RepositoryID uint64 `protobuf:"varint,2,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
	EntryCreated uint32 `protobuf:"varint,3,opt,name=EntryCreated" json:"EntryCreated,omitempty"`
	LastAttempt  uint32 `protobuf:"varint,4,opt,name=LastAttempt" json:"LastAttempt,omitempty"`
}

func (m *LatePatchingQueue) Reset()                    { *m = LatePatchingQueue{} }
func (m *LatePatchingQueue) String() string            { return proto.CompactTextString(m) }
func (*LatePatchingQueue) ProtoMessage()               {}
func (*LatePatchingQueue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *LatePatchingQueue) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *LatePatchingQueue) GetRepositoryID() uint64 {
	if m != nil {
		return m.RepositoryID
	}
	return 0
}

func (m *LatePatchingQueue) GetEntryCreated() uint32 {
	if m != nil {
		return m.EntryCreated
	}
	return 0
}

func (m *LatePatchingQueue) GetLastAttempt() uint32 {
	if m != nil {
		return m.LastAttempt
	}
	return 0
}

func init() {
	proto.RegisterType((*TrackerGitRepository)(nil), "repobuilder.TrackerGitRepository")
	proto.RegisterType((*TrackerLog)(nil), "repobuilder.TrackerLog")
	proto.RegisterType((*CreateWebRepoRequest)(nil), "repobuilder.CreateWebRepoRequest")
	proto.RegisterType((*RepoCreateStatus)(nil), "repobuilder.RepoCreateStatus")
	proto.RegisterType((*CreateRepoResponse)(nil), "repobuilder.CreateRepoResponse")
	proto.RegisterType((*RepoStatusRequest)(nil), "repobuilder.RepoStatusRequest")
	proto.RegisterType((*RepoDomain)(nil), "repobuilder.RepoDomain")
	proto.RegisterType((*Language)(nil), "repobuilder.Language")
	proto.RegisterType((*Choices)(nil), "repobuilder.Choices")
	proto.RegisterType((*ForkRequest)(nil), "repobuilder.ForkRequest")
	proto.RegisterType((*LatePatchingQueue)(nil), "repobuilder.LatePatchingQueue")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RepoBuilder service

type RepoBuilderClient interface {
	// get the status of a previously submitted create request
	GetRepoStatus(ctx context.Context, in *RepoStatusRequest, opts ...grpc.CallOption) (*CreateRepoResponse, error)
	// create a web-repo component
	CreateWebRepo(ctx context.Context, in *CreateWebRepoRequest, opts ...grpc.CallOption) (*CreateRepoResponse, error)
	// get choices for "creating a repo" for the current user, for example, this returns the Domains the particular user may create repos in
	GetRepoChoices(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Choices, error)
	// trigger a run over all pending requests (also done periodically)
	RetriggerAll(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// limited to 'prober' - this first asks gitserver to reset a repo and then recreates it (more-or-less) from scratch
	RecreateWebRepo(ctx context.Context, in *CreateWebRepoRequest, opts ...grpc.CallOption) (*CreateRepoResponse, error)
	Fork(ctx context.Context, in *ForkRequest, opts ...grpc.CallOption) (*CreateRepoResponse, error)
	// create a user-firmware repo
	CreateUserFirmwareRepo(ctx context.Context, in *CreateWebRepoRequest, opts ...grpc.CallOption) (*CreateRepoResponse, error)
}

type repoBuilderClient struct {
	cc *grpc.ClientConn
}

func NewRepoBuilderClient(cc *grpc.ClientConn) RepoBuilderClient {
	return &repoBuilderClient{cc}
}

func (c *repoBuilderClient) GetRepoStatus(ctx context.Context, in *RepoStatusRequest, opts ...grpc.CallOption) (*CreateRepoResponse, error) {
	out := new(CreateRepoResponse)
	err := grpc.Invoke(ctx, "/repobuilder.RepoBuilder/GetRepoStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoBuilderClient) CreateWebRepo(ctx context.Context, in *CreateWebRepoRequest, opts ...grpc.CallOption) (*CreateRepoResponse, error) {
	out := new(CreateRepoResponse)
	err := grpc.Invoke(ctx, "/repobuilder.RepoBuilder/CreateWebRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoBuilderClient) GetRepoChoices(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Choices, error) {
	out := new(Choices)
	err := grpc.Invoke(ctx, "/repobuilder.RepoBuilder/GetRepoChoices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoBuilderClient) RetriggerAll(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/repobuilder.RepoBuilder/RetriggerAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoBuilderClient) RecreateWebRepo(ctx context.Context, in *CreateWebRepoRequest, opts ...grpc.CallOption) (*CreateRepoResponse, error) {
	out := new(CreateRepoResponse)
	err := grpc.Invoke(ctx, "/repobuilder.RepoBuilder/RecreateWebRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoBuilderClient) Fork(ctx context.Context, in *ForkRequest, opts ...grpc.CallOption) (*CreateRepoResponse, error) {
	out := new(CreateRepoResponse)
	err := grpc.Invoke(ctx, "/repobuilder.RepoBuilder/Fork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoBuilderClient) CreateUserFirmwareRepo(ctx context.Context, in *CreateWebRepoRequest, opts ...grpc.CallOption) (*CreateRepoResponse, error) {
	out := new(CreateRepoResponse)
	err := grpc.Invoke(ctx, "/repobuilder.RepoBuilder/CreateUserFirmwareRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RepoBuilder service

type RepoBuilderServer interface {
	// get the status of a previously submitted create request
	GetRepoStatus(context.Context, *RepoStatusRequest) (*CreateRepoResponse, error)
	// create a web-repo component
	CreateWebRepo(context.Context, *CreateWebRepoRequest) (*CreateRepoResponse, error)
	// get choices for "creating a repo" for the current user, for example, this returns the Domains the particular user may create repos in
	GetRepoChoices(context.Context, *common.Void) (*Choices, error)
	// trigger a run over all pending requests (also done periodically)
	RetriggerAll(context.Context, *common.Void) (*common.Void, error)
	// limited to 'prober' - this first asks gitserver to reset a repo and then recreates it (more-or-less) from scratch
	RecreateWebRepo(context.Context, *CreateWebRepoRequest) (*CreateRepoResponse, error)
	Fork(context.Context, *ForkRequest) (*CreateRepoResponse, error)
	// create a user-firmware repo
	CreateUserFirmwareRepo(context.Context, *CreateWebRepoRequest) (*CreateRepoResponse, error)
}

func RegisterRepoBuilderServer(s *grpc.Server, srv RepoBuilderServer) {
	s.RegisterService(&_RepoBuilder_serviceDesc, srv)
}

func _RepoBuilder_GetRepoStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoBuilderServer).GetRepoStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repobuilder.RepoBuilder/GetRepoStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoBuilderServer).GetRepoStatus(ctx, req.(*RepoStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoBuilder_CreateWebRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoBuilderServer).CreateWebRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repobuilder.RepoBuilder/CreateWebRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoBuilderServer).CreateWebRepo(ctx, req.(*CreateWebRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoBuilder_GetRepoChoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoBuilderServer).GetRepoChoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repobuilder.RepoBuilder/GetRepoChoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoBuilderServer).GetRepoChoices(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoBuilder_RetriggerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoBuilderServer).RetriggerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repobuilder.RepoBuilder/RetriggerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoBuilderServer).RetriggerAll(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoBuilder_RecreateWebRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoBuilderServer).RecreateWebRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repobuilder.RepoBuilder/RecreateWebRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoBuilderServer).RecreateWebRepo(ctx, req.(*CreateWebRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoBuilder_Fork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoBuilderServer).Fork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repobuilder.RepoBuilder/Fork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoBuilderServer).Fork(ctx, req.(*ForkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoBuilder_CreateUserFirmwareRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoBuilderServer).CreateUserFirmwareRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/repobuilder.RepoBuilder/CreateUserFirmwareRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoBuilderServer).CreateUserFirmwareRepo(ctx, req.(*CreateWebRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RepoBuilder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "repobuilder.RepoBuilder",
	HandlerType: (*RepoBuilderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRepoStatus",
			Handler:    _RepoBuilder_GetRepoStatus_Handler,
		},
		{
			MethodName: "CreateWebRepo",
			Handler:    _RepoBuilder_CreateWebRepo_Handler,
		},
		{
			MethodName: "GetRepoChoices",
			Handler:    _RepoBuilder_GetRepoChoices_Handler,
		},
		{
			MethodName: "RetriggerAll",
			Handler:    _RepoBuilder_RetriggerAll_Handler,
		},
		{
			MethodName: "RecreateWebRepo",
			Handler:    _RepoBuilder_RecreateWebRepo_Handler,
		},
		{
			MethodName: "Fork",
			Handler:    _RepoBuilder_Fork_Handler,
		},
		{
			MethodName: "CreateUserFirmwareRepo",
			Handler:    _RepoBuilder_CreateUserFirmwareRepo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/golang.conradwood.net/apis/repobuilder/repobuilder.proto",
}

func init() {
	proto.RegisterFile("protos/golang.conradwood.net/apis/repobuilder/repobuilder.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 1169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x57, 0x5d, 0x6f, 0x1b, 0x45,
	0x14, 0xd5, 0xc6, 0x8e, 0x3f, 0xae, 0xe3, 0x34, 0x19, 0xd2, 0x74, 0x1b, 0x50, 0x30, 0x4b, 0x55,
	0x59, 0x51, 0xe5, 0xa8, 0x29, 0x12, 0x8f, 0x28, 0x89, 0x9b, 0x60, 0xc9, 0x2d, 0x66, 0x9d, 0x84,
	0x17, 0x5e, 0xc6, 0xeb, 0x61, 0x33, 0x8a, 0x77, 0xc7, 0xcc, 0xcc, 0xb6, 0xca, 0x2b, 0x3f, 0x00,
	0x21, 0x21, 0xc1, 0x0b, 0xbf, 0x80, 0xdf, 0x87, 0x78, 0x05, 0xcd, 0xc7, 0x7e, 0xd9, 0x4e, 0x0a,
	0x52, 0xfb, 0x92, 0xf8, 0x9e, 0x7b, 0x67, 0xe6, 0xce, 0x99, 0x73, 0x66, 0x77, 0xe1, 0xab, 0x39,
	0x67, 0x92, 0x89, 0xc3, 0x90, 0xcd, 0x70, 0x1c, 0xf6, 0x02, 0x16, 0x73, 0x3c, 0x7d, 0xcb, 0xd8,
	0xb4, 0x17, 0x13, 0x79, 0x88, 0xe7, 0x54, 0x1c, 0x72, 0x32, 0x67, 0x93, 0x84, 0xce, 0xa6, 0x84,
	0x17, 0x7f, 0xf7, 0xf4, 0x48, 0xd4, 0x2a, 0x40, 0x7b, 0xbd, 0x7b, 0xa6, 0x09, 0x58, 0x14, 0xb1,
	0xd8, 0xfe, 0x33, 0x83, 0xf7, 0x0e, 0xee, 0xa9, 0xc7, 0x89, 0xbc, 0xd6, 0x7f, 0x4c, 0xad, 0xf7,
	0x77, 0x0d, 0x76, 0x2e, 0x38, 0x0e, 0x6e, 0x08, 0x3f, 0xa7, 0xd2, 0x27, 0x73, 0x26, 0xa8, 0x64,
	0xfc, 0x16, 0x6d, 0xc2, 0xda, 0xa0, 0xef, 0x3a, 0x1d, 0xa7, 0x5b, 0xf5, 0xd7, 0x06, 0x7d, 0xd4,
	0x85, 0x07, 0xa7, 0x9c, 0x60, 0x49, 0x7c, 0xf2, 0x63, 0x42, 0x84, 0x1c, 0xf4, 0xdd, 0x35, 0x9d,
	0x5c, 0x84, 0xd1, 0x3e, 0x80, 0x81, 0x2e, 0x6e, 0xe7, 0xc4, 0xad, 0x74, 0x9c, 0x6e, 0xdb, 0x2f,
	0x20, 0xc8, 0x83, 0x8d, 0x7c, 0x9d, 0x41, 0xdf, 0xad, 0xea, 0x69, 0x4a, 0x18, 0x72, 0xa1, 0x7e,
	0xe9, 0x0f, 0xbf, 0x66, 0x42, 0xba, 0xeb, 0x1d, 0xa7, 0xdb, 0xf4, 0xd3, 0xd0, 0x66, 0x46, 0x58,
	0x5e, 0xbb, 0xb5, 0x2c, 0xa3, 0x42, 0xf4, 0x0c, 0xb6, 0xf3, 0x39, 0xcc, 0x7a, 0x53, 0xb7, 0xde,
	0x71, 0xba, 0x0d, 0x7f, 0x39, 0xa1, 0xf6, 0x33, 0x66, 0x09, 0x0f, 0xc8, 0x20, 0x16, 0x12, 0xcf,
	0x66, 0x64, 0xea, 0x36, 0x74, 0xed, 0x22, 0x8c, 0x3e, 0x81, 0xe6, 0x08, 0x07, 0x37, 0x38, 0x24,
	0x83, 0xbe, 0xdb, 0xd4, 0x6b, 0xe6, 0x00, 0xea, 0x40, 0xcb, 0x06, 0xaf, 0x71, 0x44, 0x5c, 0xd0,
	0xf9, 0x22, 0x84, 0x9e, 0x40, 0x7b, 0xa4, 0xb8, 0x3e, 0xa3, 0x33, 0x12, 0xab, 0x9a, 0x96, 0xae,
	0x29, 0x83, 0xe8, 0x29, 0x6c, 0x6a, 0x60, 0x9c, 0x4c, 0x22, 0x2a, 0x55, 0xeb, 0x1b, 0xba, 0x9d,
	0x05, 0x34, 0xab, 0x3b, 0x65, 0x91, 0xad, 0x6b, 0x17, 0xea, 0x32, 0x54, 0xed, 0xef, 0x15, 0x8d,
	0x35, 0x78, 0x45, 0xb8, 0xa0, 0x2c, 0x76, 0x37, 0xcd, 0x79, 0x2d, 0xc0, 0x68, 0x17, 0x6a, 0x97,
	0x82, 0xf0, 0x41, 0xdf, 0xdd, 0xd2, 0x8d, 0xd9, 0x08, 0xf5, 0x00, 0x8d, 0x08, 0x8f, 0xa8, 0x50,
	0x55, 0x22, 0x25, 0x74, 0x5b, 0xaf, 0xb6, 0x22, 0xa3, 0xf8, 0x1f, 0x93, 0x20, 0xe1, 0xe4, 0x98,
	0x87, 0x59, 0x39, 0x32, 0xfc, 0x2f, 0x25, 0x14, 0xab, 0x63, 0xc2, 0xdf, 0xd0, 0x40, 0xb1, 0xfa,
	0x91, 0x61, 0x35, 0x03, 0x14, 0x67, 0x36, 0xb0, 0xad, 0xed, 0x18, 0xce, 0x4a, 0xa0, 0x52, 0x92,
	0x05, 0x2e, 0xd8, 0x0d, 0x89, 0xdd, 0x87, 0xba, 0xa8, 0x84, 0xa9, 0x75, 0xce, 0x68, 0x8c, 0x67,
	0x54, 0x90, 0xa9, 0xbb, 0xab, 0xbb, 0xc9, 0x01, 0x73, 0xb6, 0x32, 0xb8, 0x56, 0xfa, 0x70, 0x1f,
	0x99, 0x6c, 0x06, 0x28, 0x06, 0x8c, 0x18, 0x4a, 0x7a, 0x75, 0x35, 0x8d, 0x2b, 0x32, 0xe8, 0x00,
	0xb6, 0x5e, 0x33, 0x49, 0x7f, 0xa0, 0x01, 0x96, 0x94, 0xc5, 0x63, 0x12, 0x4b, 0xf7, 0xb1, 0x9e,
	0x74, 0x09, 0xf7, 0xfe, 0x72, 0x00, 0xac, 0xf1, 0x86, 0x2c, 0xfc, 0x80, 0x76, 0xdb, 0x07, 0x18,
	0xb2, 0xf0, 0x15, 0x11, 0x02, 0x87, 0x44, 0x9b, 0xad, 0xe9, 0x17, 0x10, 0x2d, 0xcf, 0x64, 0x32,
	0xa3, 0x41, 0x5a, 0xb2, 0x6e, 0xe5, 0x59, 0x04, 0x95, 0xed, 0xbe, 0x09, 0xd4, 0x19, 0x4e, 0xb5,
	0xed, 0xda, 0x7e, 0x1a, 0xaa, 0xcc, 0x38, 0x09, 0x02, 0x22, 0x84, 0x35, 0x5b, 0x1a, 0x22, 0x04,
	0xd5, 0x0b, 0x2c, 0x6e, 0xb4, 0xaf, 0x9a, 0xbe, 0xfe, 0xed, 0xfd, 0x5a, 0x81, 0x1d, 0xd3, 0xdc,
	0x77, 0x64, 0xa2, 0xc8, 0xb3, 0x1b, 0x59, 0x22, 0xa0, 0x03, 0xad, 0x3e, 0x11, 0x01, 0xa7, 0x73,
	0x45, 0x99, 0xde, 0x7c, 0xd3, 0x2f, 0x42, 0x6a, 0x7a, 0x6d, 0xb9, 0x8a, 0x99, 0x5e, 0x7b, 0xed,
	0x4b, 0x68, 0x0c, 0x71, 0x1c, 0x26, 0xe9, 0x56, 0x37, 0x8f, 0x3e, 0xee, 0xd9, 0xbb, 0x71, 0xc4,
	0x59, 0xc8, 0x71, 0x14, 0xd1, 0x38, 0x4c, 0x4b, 0xfc, 0xac, 0x58, 0x99, 0xa0, 0xcf, 0x22, 0x4c,
	0x63, 0xbb, 0x7d, 0x1b, 0xa1, 0x3d, 0x68, 0xa8, 0x2e, 0xf5, 0x42, 0xe6, 0xbe, 0xc9, 0x62, 0xd5,
	0xa2, 0x95, 0x9a, 0x4e, 0xd7, 0x4d, 0x8b, 0x05, 0x48, 0x09, 0xe8, 0x8a, 0x0a, 0x3a, 0xa1, 0x33,
	0x2a, 0x6f, 0xcf, 0x39, 0x4b, 0xe6, 0x83, 0xbe, 0x70, 0x1b, 0x9d, 0x4a, 0xb7, 0xe9, 0xaf, 0xc8,
	0x28, 0x73, 0x1f, 0x6b, 0xee, 0xb2, 0xda, 0xa6, 0xae, 0x5d, 0x40, 0x95, 0xd5, 0xfa, 0xe4, 0x0d,
	0x99, 0xb1, 0x39, 0xe1, 0x59, 0x29, 0xe8, 0xd2, 0xe5, 0x84, 0xbe, 0xa2, 0x94, 0xe1, 0xed, 0x06,
	0x5b, 0xf6, 0x8a, 0xca, 0x21, 0xef, 0x0f, 0x07, 0xb6, 0xd4, 0xb6, 0xcc, 0xc9, 0x8c, 0x25, 0x96,
	0x89, 0xf8, 0x80, 0x92, 0x2c, 0x48, 0xa6, 0x5a, 0x96, 0xcc, 0x0e, 0xac, 0xbf, 0xe4, 0x9c, 0x71,
	0x7b, 0x0a, 0x26, 0xf0, 0x7e, 0x71, 0x00, 0xa5, 0x6b, 0x28, 0xc5, 0x88, 0x39, 0x8b, 0x05, 0x51,
	0xe6, 0xcd, 0x5b, 0x31, 0x7d, 0xe6, 0x80, 0x3a, 0xb9, 0x33, 0x1a, 0x53, 0x71, 0x4d, 0xa6, 0xba,
	0xcf, 0x86, 0x9f, 0xc5, 0xc5, 0x06, 0x2a, 0x77, 0x34, 0x50, 0x2d, 0x34, 0x80, 0xb6, 0xa0, 0x72,
	0xe9, 0x0f, 0x6d, 0x53, 0xea, 0xa7, 0xf7, 0xdc, 0x3c, 0x6c, 0x0c, 0x55, 0xa9, 0x86, 0xef, 0x6d,
	0xc8, 0x7b, 0x02, 0xa0, 0x86, 0x58, 0x61, 0xe5, 0x82, 0x73, 0x8a, 0x82, 0xf3, 0x7a, 0xb9, 0x82,
	0x97, 0x4e, 0x20, 0x55, 0xfc, 0x5a, 0xae, 0x78, 0xef, 0x37, 0x07, 0xea, 0xa7, 0xd7, 0x8c, 0x06,
	0x44, 0xa0, 0xe7, 0x50, 0x37, 0xb3, 0x08, 0xd7, 0xe9, 0x54, 0xba, 0xad, 0xa3, 0x47, 0xbd, 0xe2,
	0xab, 0x45, 0xbe, 0xba, 0x9f, 0xd6, 0xa1, 0x17, 0xd0, 0x4c, 0x97, 0x13, 0xee, 0x9a, 0x1e, 0xf4,
	0xb0, 0x34, 0x28, 0xf3, 0x4a, 0x5e, 0x87, 0x3e, 0x87, 0x9a, 0x16, 0x97, 0x62, 0x4f, 0x8d, 0x68,
	0xf5, 0xf4, 0x1b, 0x85, 0xc6, 0x7c, 0x9b, 0xf2, 0xfe, 0x71, 0xa0, 0x75, 0xc6, 0xf8, 0x4d, 0x4a,
	0xce, 0xe2, 0x63, 0xdf, 0x59, 0xf1, 0xd8, 0x5f, 0xb1, 0xc1, 0x02, 0x51, 0x95, 0x3b, 0x9d, 0x59,
	0x5d, 0x70, 0xe6, 0x6a, 0xdf, 0xad, 0xff, 0x0f, 0xdf, 0xd5, 0xfe, 0xbb, 0xef, 0xea, 0x77, 0xf8,
	0xce, 0xfb, 0xdd, 0x81, 0xed, 0x21, 0x96, 0x44, 0x3f, 0x50, 0x68, 0x1c, 0x7e, 0x9b, 0x90, 0x64,
	0xf9, 0x50, 0x9f, 0x2d, 0xf0, 0xa2, 0x3d, 0x75, 0xd2, 0xf8, 0xf3, 0xa7, 0xc7, 0x55, 0xc9, 0x13,
	0xb2, 0xc0, 0x90, 0x07, 0x1b, 0x2f, 0x63, 0x99, 0xbf, 0xdf, 0x18, 0x73, 0x95, 0x30, 0xe5, 0xf7,
	0x21, 0x16, 0xf2, 0x58, 0x4a, 0x12, 0xcd, 0xa5, 0x26, 0xa7, 0xed, 0x17, 0xa1, 0xa3, 0x9f, 0xab,
	0xd0, 0x52, 0xd3, 0x9e, 0x98, 0x43, 0x46, 0x23, 0x68, 0x9f, 0x13, 0x99, 0x0b, 0x1a, 0xed, 0x2f,
	0x09, 0xa7, 0xa4, 0xf4, 0xbd, 0x4f, 0x4b, 0xf9, 0x15, 0xde, 0x1c, 0x43, 0xbb, 0x74, 0xcd, 0xa3,
	0xcf, 0x56, 0x8c, 0x28, 0x3f, 0x02, 0xde, 0x3d, 0xe9, 0x17, 0xb0, 0x69, 0xdb, 0x4c, 0x15, 0xbf,
	0x91, 0xde, 0xee, 0x57, 0x8c, 0x4e, 0xf7, 0x76, 0xca, 0x13, 0xd8, 0x9a, 0x03, 0x45, 0xb0, 0xe4,
	0x34, 0x0c, 0x09, 0x3f, 0x9e, 0xcd, 0x16, 0xc6, 0x94, 0x22, 0x74, 0x09, 0x0f, 0x7c, 0x12, 0xbc,
	0xf7, 0xc6, 0x8f, 0xa1, 0xaa, 0xac, 0x80, 0xdc, 0x52, 0x61, 0xc1, 0x1d, 0xef, 0x9e, 0xe2, 0x7b,
	0xd8, 0x35, 0xa8, 0x7a, 0xf7, 0x39, 0xa3, 0x3c, 0x7a, 0x8b, 0x39, 0x79, 0x5f, 0x0d, 0x9e, 0x74,
	0xe1, 0x69, 0x4c, 0x64, 0xf1, 0x8b, 0xc1, 0x7e, 0x43, 0xa8, 0x8f, 0x86, 0xe2, 0xe0, 0x49, 0x4d,
	0x7f, 0x37, 0xbc, 0xf8, 0x37, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x72, 0x80, 0x3a, 0xe3, 0x0c, 0x00,
	0x00,
}
